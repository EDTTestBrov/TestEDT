#Область ОсновнойФункционал
Функция ПараметрыВнешнейОбработки() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

Процедура ЗаполнитьПараметры(ПараметрыСтрокой) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСтрокой) Тогда
		ПараметрыЗадачи = ЗначениеИзСтрокиВнутр(ПараметрыСтрокой);
		Если ТипЗнч(ПараметрыЗадачи) = Тип("Структура") Тогда			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗадачи);
			Если  ПараметрыЗадачи.Свойство("ГруппыНоменклатурыОпт") И ТипЗнч(ПараметрыЗадачи.ГруппыНоменклатурыОпт) = Тип("Массив") Тогда
				ГруппыНоменклатурыОпт.ЗагрузитьЗначения(ПараметрыЗадачи.ГруппыНоменклатурыОпт);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработку(НастройкаЗагрузки = Неопределено) Экспорт
	
	Если НастройкаЗагрузки = "АвтоТест" Или НастройкаЗагрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаЗагрузки <> Неопределено Тогда 
		Если ТипЗнч(НастройкаЗагрузки) = Тип("Структура") Тогда
			ЗаполнитьПараметры(НастройкаЗагрузки.Задача.РегламентнаяЗадача.ПараметрыВнешнейОбработкиСтрокой);
			РегламентнаяЗадача = НастройкаЗагрузки.Задача.РегламентнаяЗадача;
			ПараметрыВнешнейОбработкиСтрокой = НастройкаЗагрузки.Задача.РегламентнаяЗадача.ПараметрыВнешнейОбработкиСтрокой;
		Иначе
			ЗаполнитьПараметры(НастройкаЗагрузки);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбменSmartPricing();
	
КонецПроцедуры
#КонецОбласти //ОсновнойФункционал

Процедура ВыполнитьОбменSmartPricing()

	ТекДата = ТекущаяДата();
	
	Если ЭтотОбъект.РежимЗагрузки Тогда
		
		БылиОшибкиЗагрузки = ложь;
		Разделитель = ",";
		
		Попытка
			Соединение = Новый FTPСоединение(АдресСервераFTP, ?(ЗначениеЗаполнено(ПортСервераFTP),ПортСервераFTP,21), Пользователь, Пароль);
			Соединение.УстановитьТекущийКаталог(КаталогЗагрузкиПрайсов);
			
			СписокФайлов = Новый ТаблицаЗначений;
			СписокФайлов.Колонки.Добавить("ПолноеИмя");
			СписокФайлов.Колонки.Добавить("ИмяФайла");
			СписокФайлов.Колонки.Добавить("ВременныйФайл");
			СписокФайлов.Колонки.Добавить("Обработан");
			
			МассивВходящих = Соединение.НайтиФайлы("/"+КаталогЗагрузкиПрайсов,"*.csv");
			ОбработанныеФайлы = новый Массив;
			
			Для каждого ВходящийФайл Из МассивВходящих Цикл
				ВременныйФайл = ПолучитьИмяВременногоФайла(".csv");
				Соединение.Получить(ВходящийФайл.ПолноеИмя, ВременныйФайл);
				СтрокаФайла = СписокФайлов.Добавить();
				СтрокаФайла.ПолноеИмя = ВходящийФайл.ПолноеИмя;
				СтрокаФайла.ИмяФайла = ВходящийФайл.Имя;
				СтрокаФайла.ВременныйФайл = ВременныйФайл;
				СтрокаФайла.Обработан = ложь;
			КонецЦикла;
			
			Для Каждого СтрокаФайла Из СписокФайлов Цикл
				Если ОбработатьФайлПрайса(СтрокаФайла.ПолноеИмя,СтрокаФайла.ВременныйФайл,Разделитель,ТекДата) Тогда
					СтрокаФайла.Обработан = истина;
					Соединение.Переместить(СтрокаФайла.ПолноеИмя,"/"+КаталогАрхивации+"/"+СтрокаФайла.ИмяФайла);
				Иначе
					БылиОшибкиЗагрузки = истина;
				КонецЕсли;
			КонецЦикла;
		Исключение
			Информация  = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обмена SmartPricing (загрузка)'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(Информация));
			ВызватьИсключение;
		КонецПопытки;
		
		Если БылиОшибкиЗагрузки Тогда
			ВызватьИсключение НСтр("ru = 'При выполнение обмена SmartPricing (загрузка) были ошибки!'");
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаПоследнейУдачнойВыгрузки) Тогда
			НачалоПериода = НачалоДня(ЭтотОбъект.ДатаПоследнейУдачнойВыгрузки);
		Иначе	
		    НачалоПериода = Дата(2000,1,1);
		КонецЕсли;
		КонецПериода = НачалоДня(ТекДата)-1;
		
		БылиОшибкиВыгрузки = ложь;
		
		Попытка
			
			мГруппыНоменклатурыОпт = ГруппыНоменклатурыОпт.ВыгрузитьЗначения();
			Разделитель = ",";
			
			ДанныеЦеныКонкурентов = ПолучитьЦеныКонкурентов(НачалоПериода,КонецПериода,Разделитель);
			ПолноеИмяФайлаЦеныКонкурентов = "";
			ИмяФайлаЦеныКонкурентов = "CompetitorPrices_"+Формат(НачалоПериода,"ДФ=yyyyMMdd")+"-"+Формат(КонецПериода,"ДФ=yyyyMMdd");
			Если ДанныеЦеныКонкурентов <> "" Тогда
				ПолноеИмяФайлаЦеныКонкурентов = ОбменДаннымиEDIСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), ИмяФайлаЦеныКонкурентов);
				кодировка = КодировкаТекста.ANSI;
	          	ТекстовыйФайлЗапись = Новый ЗаписьТекста(ПолноеИмяФайлаЦеныКонкурентов,Кодировка);           
	          	ТекстовыйФайлЗапись.ЗаписатьСтроку(ДанныеЦеныКонкурентов);
	          	ТекстовыйФайлЗапись.Закрыть(); 			
				//ЗапуститьПриложение("certutil -hashfile "+ПолноеИмяФайлаЦеныКонкурентов+" MD5 > ");
			КонецЕсли;
			
			//ДанныеПродажиSIS = ПолучитьПродажиSIS(НачалоПериода,КонецПериода,Разделитель,мГруппыНоменклатурыОпт);
			//ПолноеИмяФайлаПродажиSIS = "";
			//ИмяФайлаПродажиSIS = "Sales_"+Формат(НачалоПериода,"ДФ=yyyyMMdd")+"-"+Формат(КонецПериода,"ДФ=yyyyMMdd");
			//Если ДанныеПродажиSIS <> "" Тогда
			//	ПолноеИмяФайлаПродажиSIS = ОбменДаннымиEDIСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), ИмяФайлаПродажиSIS);
			//	кодировка = КодировкаТекста.ANSI;
			//  	ТекстовыйФайлЗапись = Новый ЗаписьТекста(ПолноеИмяФайлаПродажиSIS,Кодировка);           
			//  	ТекстовыйФайлЗапись.ЗаписатьСтроку(ДанныеПродажиSIS);
			//  	ТекстовыйФайлЗапись.Закрыть(); 			
			//КонецЕсли;
			
			ДанныеАссортимент = ПолучитьДанныеПоАссортименту(НачалоПериода,КонецПериода,Разделитель);
			ПолноеИмяФайлаАссортимент = "";
			ИмяФайлаАссортимент = "LastAssort";
			Если ДанныеАссортимент <> "" Тогда
				ПолноеИмяФайлаАссортимент = ОбменДаннымиEDIСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), ИмяФайлаАссортимент);
				кодировка = КодировкаТекста.ANSI;
	          	ТекстовыйФайлЗапись = Новый ЗаписьТекста(ПолноеИмяФайлаАссортимент,Кодировка);           
	          	ТекстовыйФайлЗапись.ЗаписатьСтроку(ДанныеАссортимент);
	          	ТекстовыйФайлЗапись.Закрыть(); 			
			КонецЕсли;
		
			Соединение = Новый FTPСоединение(АдресСервераFTP, ?(ЗначениеЗаполнено(ПортСервераFTP),ПортСервераFTP,21), Пользователь, Пароль);
			
			Если ПолноеИмяФайлаЦеныКонкурентов <> "" Тогда
				Если ЗначениеЗаполнено(КаталогВыгрузкиЦенКонкурентов) Тогда 
					Попытка
						Соединение.УстановитьТекущийКаталог(КаталогВыгрузкиЦенКонкурентов);
					Исключение
					    Соединение.СоздатьКаталог(КаталогВыгрузкиЦенКонкурентов);
						Соединение.УстановитьТекущийКаталог(КаталогВыгрузкиЦенКонкурентов);
					КонецПопытки;
				КонецЕсли;
				Соединение.Записать(ПолноеИмяФайлаЦеныКонкурентов, ИмяФайлаЦеныКонкурентов);
			КонецЕсли;
			
			//Если ПолноеИмяФайлаПродажиSIS <> "" Тогда
			//	Если ЗначениеЗаполнено(КаталогВыгрузкиПродаж) Тогда 
			//		Попытка
			//			Соединение.УстановитьТекущийКаталог(КаталогВыгрузкиПродаж);
			//		Исключение
			//		    Соединение.СоздатьКаталог(КаталогВыгрузкиПродаж);
			//			Соединение.УстановитьТекущийКаталог(КаталогВыгрузкиПродаж);
			//		КонецПопытки;
			//	КонецЕсли;
			//	Соединение.Записать(ПолноеИмяФайлаПродажиSIS, ИмяФайлаПродажиSIS);
			//КонецЕсли;
			
			Если ПолноеИмяФайлаАссортимент <> "" Тогда
				Если ЗначениеЗаполнено(КаталогВыгрузкиАссортимента) Тогда 
					Попытка
						Соединение.УстановитьТекущийКаталог(КаталогВыгрузкиАссортимента);
					Исключение
					    Соединение.СоздатьКаталог(КаталогВыгрузкиАссортимента);
						Соединение.УстановитьТекущийКаталог(КаталогВыгрузкиАссортимента);
					КонецПопытки;
				КонецЕсли;
				Соединение.Записать(ПолноеИмяФайлаАссортимент, ИмяФайлаАссортимент);
			КонецЕсли;
			
		Исключение
			Информация  = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обмена SmartPricing (выгрузка)'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(Информация));
			ВызватьИсключение;
		КонецПопытки;
		
		Если не БылиОшибкиВыгрузки Тогда
			Попытка
				ПараметрыЗадачи = ЗначениеИзСтрокиВнутр(ПараметрыВнешнейОбработкиСтрокой);
				ПараметрыЗадачи.ДатаПоследнейУдачнойВыгрузки = КонецПериода;
				РегЗадача = РегламентнаяЗадача.ПолучитьОбъект();
				РегЗадача.ПараметрыВнешнейОбработкиСтрокой = ЗначениеВСтрокуВнутр(ПараметрыЗадачи);
				РегЗадача.Записать();
			Исключение
				Информация  = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обмена SmartPricing'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(Информация));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Функция ОбработатьФайлПрайса(ИмяИсходногоФайла,ПолноеИмяФайла,Разделитель,ДатаПереоценки)

	Рез = истина;
	Попытка
		ЗагружаемыйФайл = Новый ТекстовыйДокумент;
		//ЗагружаемыйФайл.Прочитать(ПолноеИмяФайла,КодировкаТекста.Системная);	
		ЗагружаемыйФайл.Прочитать(ПолноеИмяФайла);	
		Шапка = ЗагружаемыйФайл.ПолучитьСтроку(1);	
		мКолонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Шапка,Разделитель);
		Если мКолонки.Количество() <> 9  Тогда
			ВызватьИсключение НСтр("ru = 'Неверный формат файла прайсов!'")+" "+ИмяИсходногоФайла; 
		КонецЕсли;
		КолВоСтрок = ЗагружаемыйФайл.КоличествоСтрок();
		ТЗДанныеПрайса = новый ТаблицаЗначений;
		ТЗДанныеПрайса.Колонки.Добавить("ИдСЕ",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(40)));
		ТЗДанныеПрайса.Колонки.Добавить("ИдНоменклатуры",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(40)));
		ТЗДанныеПрайса.Колонки.Добавить("КодНоменклатуры",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10)));
		ТЗДанныеПрайса.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2)));
		Для НомерСтроки = 2 По КолВоСтрок Цикл
			СтрокаФайла = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
			МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаФайла,Разделитель);		
			СтрокаТЗ = ТЗДанныеПрайса.Добавить();
			СтрокаТЗ.ИдСЕ = МассивКол[3];
			СтрокаТЗ.ИдНоменклатуры = МассивКол[5];
			СтрокаТЗ.КодНоменклатуры = МассивКол[6];
			//СтрокаТЗ.Цена = Число(СтрЗаменить(МассивКол[8],".",","));
			СтрокаТЗ.Цена = Число(МассивКол[8]);
		КонецЦикла;
		СформироватьПереоценкиПоДаннымПрайса(ТЗДанныеПрайса,ИмяИсходногоФайла,ДатаПереоценки);
	Исключение
		Рез = Ложь;
		Информация  = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обмена SmartPricing (загрузка)'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(Информация));
	КонецПопытки;
	возврат Рез;

КонецФункции

Процедура СформироватьПереоценкиПоДаннымПрайса(ТЗДанныеПрайса,ИмяИсходногоФайла,ДатаПереоценки)

	запрос = новый запрос("ВЫБРАТЬ
	                      |	ТЗДанныеПрайса.ИдСЕ КАК ИдСЕ,
	                      |	ТЗДанныеПрайса.ИдНоменклатуры КАК ИдНоменклатуры,
	                      |	ТЗДанныеПрайса.КодНоменклатуры КАК КодНоменклатуры,
	                      |	ТЗДанныеПрайса.Цена КАК Цена
	                      |ПОМЕСТИТЬ ДанныеПрайса
	                      |ИЗ
	                      |	&ДанныеПрайса КАК ТЗДанныеПрайса
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	                      |	Номенклатура.Ссылка КАК Номенклатура,
	                      |	ДанныеПрайса.Цена КАК Цена,
	                      |	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	                      |ИЗ
	                      |	ДанныеПрайса КАК ДанныеПрайса
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                      |		ПО ДанныеПрайса.ИдСЕ = СтруктурныеЕдиницы.ИДВнешнейСистемы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	                      |			ПО Номенклатура.Ссылка = ЕдиницыИзмерения.Владелец
	                      |				И Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
	                      |		ПО ДанныеПрайса.ИдНоменклатуры = Номенклатура.ИДВнешнейСистемы
	                      |ИТОГИ
	                      |	КОЛИЧЕСТВО(Номенклатура)
	                      |ПО
	                      |	СтруктурнаяЕдиница
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДанныеПрайса.ИдСЕ КАК ИдСЕ
	                      |ИЗ
	                      |	ДанныеПрайса КАК ДанныеПрайса
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                      |		ПО ДанныеПрайса.ИдСЕ = СтруктурныеЕдиницы.ИДВнешнейСистемы
	                      |ГДЕ
	                      |	СтруктурныеЕдиницы.Ссылка ЕСТЬ NULL
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДанныеПрайса.ИдНоменклатуры КАК ИдНоменклатуры
	                      |ИЗ
	                      |	ДанныеПрайса КАК ДанныеПрайса
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	                      |		ПО ДанныеПрайса.ИдНоменклатуры = Номенклатура.ИДВнешнейСистемы
	                      |ГДЕ
	                      |	Номенклатура.Ссылка ЕСТЬ NULL");
	запрос.УстановитьПараметр("ДанныеПрайса",ТЗДанныеПрайса);
	мРез = запрос.ВыполнитьПакет();
	
	СтрокаНетСЕ = ИмяИсходногоФайла;
	ВыборкаНетСЕ = мРез[2].Выбрать();
	Пока ВыборкаНетСЕ.Следующий() Цикл
			СтрокаНетСЕ = СтрокаНетСЕ+Символы.ПС+"Не найдена СЕ с ИД = "+ВыборкаНетСЕ.ИдСЕ;
	КонецЦикла;
	Если СтрокаНетСЕ <> ИмяИсходногоФайла Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обмена SmartPricing (загрузка)'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрокаНетСЕ);
	КонецЕсли;
	СтрокаНетНоменклатуры = ИмяИсходногоФайла;
	ВыборкаНетНоменклатуры = мРез[3].Выбрать();
	Пока ВыборкаНетНоменклатуры.Следующий() Цикл
		СтрокаНетНоменклатуры = СтрокаНетНоменклатуры+Символы.ПС+"Не найдена номенклатура с ИД = "+ВыборкаНетНоменклатуры.ИдНоменклатуры;
	КонецЦикла;
	Если СтрокаНетНоменклатуры <> ИмяИсходногоФайла Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение обмена SmartPricing (загрузка)'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрокаНетСЕ);
	КонецЕсли;
	Если СтрокаНетСЕ <> ИмяИсходногоФайла или СтрокаНетНоменклатуры <> ИмяИсходногоФайла Тогда
		ВызватьИсключение "Ошибка при загрузке прайсов из файла: "+ИмяИсходногоФайла;
	КонецЕсли;
	
	ВыборкаСЕ = мРез[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
	Пока ВыборкаСЕ.Следующий() Цикл
		ВыборкаНоменклатура = ВыборкаСЕ.Выбрать(ОбходРезультатаЗапроса.Прямой);
		ДокПереоценка = Документы.Переоценка.СоздатьДокумент();
		ДокПереоценка.СтруктурнаяЕдиница = ВыборкаСЕ.СтруктурнаяЕдиница;
		ДокПереоценка.КатегорияЦен = Справочники.КатегорииЦен.Розничная;
		ДокПереоценка.Дата = ДатаПереоценки;
		ДокПереоценка.РежимСтруктурныхЕдиниц = 1;
		ДокПереоценка.ФлагНовогоРелиза = Истина;
		ДокПереоценка.Фирма = ФирмаДляПереоценок;
		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрТЧ = ДокПереоценка.Состав.Добавить();
			СтрТЧ.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			СтрТЧ.ЕдиницаИзмерения = ВыборкаНоменклатура.ЕдиницаИзмерения;
			СтрТЧ.ЦенаНовая = ВыборкаНоменклатура.Цена;
		КонецЦикла;
		ДокПереоценка.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;

КонецПроцедуры


Функция ПолучитьПродажиSIS(НачалоПериода,КонецПериода,Разделитель,мГруппыНоменклатурыОпт)

	СтрокаДанные = "";

	запрос = новый запрос("ВЫБРАТЬ
	                      |	sms_Store.StoreCode КАК StoreCode,
	                      |	100000 * sms_Store.StoreCode + sms_POS.PosCode КАК PosCode,
	                      |	sms_POS.Name КАК PosName,
	                      |	sms_Shift.ShiftUID КАК Смена,
	                      |	sms_Cheque.ChequeUID КАК Чек,
	                      |	sms_Shift.CloseTime КАК ДатаВремяЗакрытияСмены,
	                      |	sms_Shift.OpenTime КАК ДатаВремяОткрытияСмены,
	                      |	sms_Shift.ShiftNo КАК НомерСменыККМ,
	                      |	sms_Cheque.ChequeNo КАК НомерЧекаККМ,
	                      |	sms_Cheque.CloseTime КАК ДатаВремяЗакрытияЧека,
	                      |	sms_Cheque.OpenTime КАК ДатаВремяОткрытияЧека,
	                      |	ВЫБОР
	                      |		КОГДА sms_Cheque.CloseType <> 0
	                      |			ТОГДА ""_О""
	                      |		ИНАЧЕ """"
	                      |	КОНЕЦ КАК CloseType,
	                      |	sms_ChequeLine.ChequeLineNo КАК НомерПозицииККМ,
	                      |	sms_Item.ItemID КАК КодТовараSIS,
	                      |	sms_Item.ItemCode КАК КодТовара,
	                      |	sms_Item.Name КАК НаименованиеТовара,
	                      |	sms_ChequeLine.Price КАК Цена,
	                      |	sms_ChequeLine.Quantity КАК Количество,
	                      |	sms_ChequeLine.DiscountValue КАК РазмерСкидки,
	                      |	sms_ChequeLine.Amount КАК Сумма,
	                      |	sms_SaleItem.CodeForFrontOffice КАК CodeForFrontOffice
	                      |ИЗ
	                      |	ВнешнийИсточникДанных.SIS.Таблица.sms_ChequeLine КАК sms_ChequeLine
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SIS.Таблица.sms_Cheque КАК sms_Cheque
	                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SIS.Таблица.sms_Shift КАК sms_Shift
	                      |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SIS.Таблица.sms_POS КАК sms_POS
	                      |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SIS.Таблица.sms_Store КАК sms_Store
	                      |					ПО sms_POS.StoreUID = sms_Store.Ссылка
	                      |				ПО sms_Shift.PosUID = sms_POS.Ссылка
	                      |			ПО sms_Cheque.ShiftUID = sms_Shift.Ссылка
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |				sms_Cheque.ChequeUID КАК ChequeUID
	                      |			ИЗ
	                      |				ВнешнийИсточникДанных.SIS.Таблица.sms_ChequeLine КАК sms_ChequeLine
	                      |					ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SIS.Таблица.sms_Cheque КАК sms_Cheque
	                      |					ПО sms_ChequeLine.ChequeUID = sms_Cheque.Ссылка
	                      |			ГДЕ
	                      |				sms_ChequeLine.Storno = ИСТИНА
	                      |			
	                      |			СГРУППИРОВАТЬ ПО
	                      |				sms_Cheque.ChequeUID) КАК t
	                      |			ПО (t.ChequeUID = sms_Cheque.ChequeUID)
	                      |		ПО sms_ChequeLine.ChequeUID = sms_Cheque.Ссылка
	                      |			И (sms_Cheque.CloseTime >= &ДатаНачала)
	                      |			И (sms_Cheque.CloseTime <= &ДатаОкончания)
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SIS.Таблица.sms_SaleItem КАК sms_SaleItem
	                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SIS.Таблица.sms_ItemUnitSchema КАК sms_ItemUnitSchema
	                      |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.SIS.Таблица.sms_Item КАК sms_Item
	                      |				ПО sms_ItemUnitSchema.ItemUID = sms_Item.Ссылка
	                      |			ПО sms_SaleItem.ItemUnitSchemaUID = sms_ItemUnitSchema.Ссылка
	                      |		ПО sms_ChequeLine.SaleItemUID = sms_SaleItem.Ссылка
	                      |ГДЕ
	                      |	ВЫБОР
	                      |			КОГДА sms_Cheque.CloseType <> 0
	                      |				ТОГДА 1
	                      |			ИНАЧЕ 2
	                      |		КОНЕЦ = &ОтменённыеЧеки
	                      |	И sms_Store.StoreCode = &КодСЕ
	                      |	И sms_Cheque.ChequeType = 0
	                      |{ГДЕ
	                      |	sms_ChequeLine.Storno КАК СторнированныеТовары,
	                      |	(ВЫБОР
	                      |			КОГДА t.ChequeUID ЕСТЬ NULL
	                      |				ТОГДА ЛОЖЬ
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ) КАК СоСторнированнымиТоварами,
	                      |	(ВЫБОР
	                      |			КОГДА sms_Shift.CloseTime ЕСТЬ НЕ NULL 
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ ЛОЖЬ
	                      |		КОНЕЦ) КАК Закрытая}");
	запрос.УстановитьПараметр("ДатаНачала",НачалоПериода);
	запрос.УстановитьПараметр("ДатаОкончания",КонецПериода);
	запрос.УстановитьПараметр("ОтменённыеЧеки",2);
	запрос.УстановитьПараметр("КодСЕ",2);
	ТЗЧеки = запрос.Выполнить().Выгрузить();
	
	запрос = новый запрос("ВЫБРАТЬ
	                      |	ТЗЧеки.StoreCode КАК StoreCode,
	                      |	ТЗЧеки.PosCode КАК PosCode,
	                      |	ТЗЧеки.PosName КАК PosName,
	                      |	ТЗЧеки.Смена КАК Смена,
	                      |	ТЗЧеки.Чек КАК Чек,
	                      |	ТЗЧеки.ДатаВремяЗакрытияСмены КАК ДатаВремяЗакрытияСмены,
	                      |	ТЗЧеки.ДатаВремяОткрытияСмены КАК ДатаВремяОткрытияСмены,
	                      |	ТЗЧеки.НомерСменыККМ КАК НомерСменыККМ,
	                      |	ТЗЧеки.НомерЧекаККМ КАК НомерЧекаККМ,
	                      |	ТЗЧеки.ДатаВремяЗакрытияЧека КАК ДатаВремяЗакрытияЧека,
	                      |	ТЗЧеки.ДатаВремяОткрытияЧека КАК ДатаВремяОткрытияЧека,
	                      |	ТЗЧеки.CloseType КАК CloseType,
	                      |	ТЗЧеки.НомерПозицииККМ КАК НомерПозицииККМ,
	                      |	ТЗЧеки.КодТовараSIS КАК КодТовараSIS,
	                      |	ТЗЧеки.КодТовара КАК КодТовара,
	                      |	ТЗЧеки.НаименованиеТовара КАК НаименованиеТовара,
	                      |	ТЗЧеки.Цена КАК Цена,
	                      |	ТЗЧеки.Количество КАК Количество,
	                      |	ТЗЧеки.РазмерСкидки КАК РазмерСкидки,
	                      |	ТЗЧеки.Сумма КАК Сумма,
	                      |	ТЗЧеки.CodeForFrontOffice КАК CodeForFrontOffice
	                      |ПОМЕСТИТЬ ТаблицаЧековSIS
	                      |ИЗ
	                      |	&ТЗЧеки КАК ТЗЧеки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблицаЧековSIS.StoreCode КАК StoreCode,
	                      |	ТаблицаЧековSIS.PosCode КАК PosCode,
	                      |	ТаблицаЧековSIS.PosName КАК PosName,
	                      |	ТаблицаЧековSIS.Смена КАК Смена,
	                      |	ТаблицаЧековSIS.Чек КАК Чек,
	                      |	ТаблицаЧековSIS.ДатаВремяЗакрытияСмены КАК ДатаВремяЗакрытияСмены,
	                      |	ТаблицаЧековSIS.ДатаВремяОткрытияСмены КАК ДатаВремяОткрытияСмены,
	                      |	ТаблицаЧековSIS.НомерСменыККМ КАК НомерСменыККМ,
	                      |	ТаблицаЧековSIS.НомерЧекаККМ КАК НомерЧекаККМ,
	                      |	ТаблицаЧековSIS.ДатаВремяЗакрытияЧека КАК ДатаВремяЗакрытияЧека,
	                      |	ТаблицаЧековSIS.ДатаВремяОткрытияЧека КАК ДатаВремяОткрытияЧека,
	                      |	ТаблицаЧековSIS.CloseType КАК CloseType,
	                      |	ТаблицаЧековSIS.НомерПозицииККМ КАК НомерПозицииККМ,
	                      |	ТаблицаЧековSIS.КодТовараSIS КАК КодТовараSIS,
	                      |	ТаблицаЧековSIS.КодТовара КАК КодТовара,
	                      |	ТаблицаЧековSIS.Цена КАК Цена,
	                      |	ТаблицаЧековSIS.Количество КАК Количество,
	                      |	ТаблицаЧековSIS.РазмерСкидки КАК РазмерСкидки,
	                      |	ТаблицаЧековSIS.Сумма КАК Сумма,
	                      |	ТаблицаЧековSIS.CodeForFrontOffice КАК CodeForFrontOffice,
	                      |	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	                      |	СтруктурныеЕдиницы.Формат КАК Формат,
	                      |	СтруктурныеЕдиницы.Регион КАК Регион,
	                      |	СтруктурныеЕдиницы.ИДВнешнейСистемы КАК ИдВнешнейСистемыСЕ,
	                      |	СтруктурныеЕдиницы.Код КАК КодСЕ,
	                      |	НоменклатураПозиции.Ссылка КАК Номенклатура,
	                      |	НоменклатураПозиции.Код КАК НоменклатураКод,
	                      |	НоменклатураПозиции.ИДВнешнейСистемы КАК НоменклатураИдВнешнейСистемы,
	                      |	НоменклатураПозиции.ТорговаяМарка КАК ТорговаяМарка,
	                      |	НоменклатураПозиции.НаименованиеДляЦенника КАК НаименованиеДляЦенника,
	                      |	НоменклатураПозиции.Ссылка.Родитель КАК ГруппаУровень5,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Код КАК КодГруппаУровень5,
	                      |	НоменклатураПозиции.Ссылка.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень5,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель КАК ГруппаУровень4,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Код КАК КодГруппаУровень4,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень4,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель КАК ГруппаУровень3,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель.Код КАК КодГруппаУровень3,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень3,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель.Родитель КАК ГруппаУровень2,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель.Родитель.Код КАК КодГруппаУровень2,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень2,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель КАК ГруппаУровень1,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель.Код КАК КодГруппаУровень1,
	                      |	НоменклатураПозиции.Ссылка.Родитель.Родитель.Родитель.Родитель.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень1,
	                      |	НоменклатураПозиции.Смолл_ЕдиницаИзмеренияКоробки КАК Смолл_ЕдиницаИзмеренияКоробки,
	                      |	НоменклатураПозиции.Смолл_ЕдиницаИзмеренияКоробки.Коэффициент КАК Смолл_ЕдиницаИзмеренияКоробкиКоэффициент,
	                      |	ЗначениеСвойстваКластер.Значение КАК Кластер,
	                      |	ЕСТЬNULL(ЗначениеУровеньSmartPricing.Значение, 0) КАК УровеньSmartPricing,
	                      |	ЕСТЬNULL(ЗначениеМинЦена.Значение, 0) КАК МинРозничнаяЦена,
	                      |	НоменклатураПозиции.Смолл_ТипСТМ КАК ТипСТМ,
	                      |	НоменклатураПозиции.Смолл_ТипСТМ.Код КАК КодТипСТМ,
	                      |	НоменклатураПозиции.Смолл_PriceFamily КАК PriceFamily,
	                      |	НоменклатураПозиции.Смолл_БазоваяЕдиницаИзмерения КАК Смолл_БазоваяЕдиницаИзмерения,
	                      |	ЕСТЬNULL(ЗначениеВесНеттоЕдиницыИзмерения.Значение, 0) КАК ВесНетто,
	                      |	Смолл_ЗначенияСтатусовАВССрезПоследних.СтатусABC КАК СтатусABC
	                      |ИЗ
	                      |	ТаблицаЧековSIS КАК ТаблицаЧековSIS
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                      |		ПО ТаблицаЧековSIS.StoreCode = СтруктурныеЕдиницы.Код
	                      |			И (НЕ СтруктурныеЕдиницы.ПометкаУдаления)
	                      |			И (СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеСвойстваКластер
	                      |		ПО (СтруктурныеЕдиницы.Ссылка = ЗначениеСвойстваКластер.Объект)
	                      |			И (ЗначениеСвойстваКластер.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |			И (ЗначениеСвойстваКластер.Свойство = &СвойствоКластер)
	                      |			И (ЗначениеСвойстваКластер.Значение.Код <> 0)
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПозиции
	                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеВыгружатьВSmartPricing
	                      |			ПО НоменклатураПозиции.Родитель.Родитель.Родитель.Родитель = ЗначениеВыгружатьВSmartPricing.Объект
	                      |				И (ЗначениеВыгружатьВSmartPricing.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |				И (ЗначениеВыгружатьВSmartPricing.Свойство = &СвойствоВыгружатьВSmartPricing)
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеУровеньSmartPricing
	                      |			ПО НоменклатураПозиции.Родитель.Родитель.Родитель.Родитель = ЗначениеУровеньSmartPricing.Объект
	                      |				И (ЗначениеУровеньSmartPricing.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |				И (ЗначениеУровеньSmartPricing.Свойство = &СвойствоУровеньSmartPricing)
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеМинЦена
	                      |			ПО НоменклатураПозиции.Родитель.Родитель.Родитель.Родитель = ЗначениеМинЦена.Объект
	                      |				И (ЗначениеМинЦена.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |				И (ЗначениеМинЦена.Свойство = &СвойствоМинЦена)
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеВесНеттоЕдиницыИзмерения
	                      |			ПО НоменклатураПозиции.Смолл_БазоваяЕдиницаИзмерения = ЗначениеВесНеттоЕдиницыИзмерения.Объект
	                      |				И (ЗначениеВесНеттоЕдиницыИзмерения.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |				И (ЗначениеВесНеттоЕдиницыИзмерения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Нетто))
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Смолл_ЗначенияСтатусовАВС.СрезПоследних(&КонецПериода, Уровень = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Смолл_ЗначенияСтатусовАВССрезПоследних
	                      |			ПО НоменклатураПозиции.Ссылка = Смолл_ЗначенияСтатусовАВССрезПоследних.Номенклатура
	                      |		ПО ТаблицаЧековSIS.КодТовара = НоменклатураПозиции.Код
	                      |ГДЕ
	                      |	ЗначениеВыгружатьВSmartPricing.Значение = ИСТИНА
	                      |ИТОГИ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Чек),
	                      |	КОЛИЧЕСТВО(Номенклатура)
	                      |ПО
	                      |	StoreCode,
	                      |	Чек");
	запрос.УстановитьПараметр("ТЗЧеки",ТЗЧеки);
	запрос.УстановитьПараметр("СвойствоКластер",ПолучитьСоздатьСвойствоКластер());
	запрос.УстановитьПараметр("СвойствоВыгружатьВSmartPricing",ПолучитьСоздатьСвойствоВыгружатьВSmartPricing());
	запрос.УстановитьПараметр("СвойствоУровеньSmartPricing",ПолучитьСоздатьСвойствоУровеньSmartPricing());
	запрос.УстановитьПараметр("СвойствоМинЦена",ПолучитьСоздатьСвойствоМинРозничнаяЦена());
	запрос.УстановитьПараметр("КонецПериода",КонецПериода);
	
	ВыборкаСЕ = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
	Пока ВыборкаСЕ.Следующий() Цикл
		ВыборкаЧеки = ВыборкаСЕ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЧеки.Следующий() Цикл
			ВыборкаПозицииЧека = ВыборкаЧеки.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ВыборкаПозицииЧека.Следующий()  Цикл
				ПозицияПроверена = истина;
				Для каждого ГруппаОпт Из мГруппыНоменклатурыОпт Цикл
					Если ГруппаОпт = ВыборкаПозицииЧека.ГруппаУровень1 Тогда
						ПозицияПроверена = ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(ВыборкаПозицииЧека.Смолл_ЕдиницаИзмеренияКоробки) и ВыборкаПозицииЧека.Смолл_ЕдиницаИзмеренияКоробкиКоэффициент >0 Тогда
					Если ВыборкаЧеки.Номенклатура <=5 и ВыборкаПозицииЧека.Смолл_ЕдиницаИзмеренияКоробкиКоэффициент > 5 и ВыборкаПозицииЧека.Количество >= ВыборкаПозицииЧека.Смолл_ЕдиницаИзмеренияКоробкиКоэффициент*3 Тогда
						ПозицияПроверена = ложь;
					КонецЕсли;
					Если ВыборкаЧеки.Номенклатура <=5 и ВыборкаПозицииЧека.Смолл_ЕдиницаИзмеренияКоробкиКоэффициент <= 5 и ВыборкаПозицииЧека.Количество >= 15 Тогда
						ПозицияПроверена = ложь;
					КонецЕсли;
					Если ВыборкаЧеки.Номенклатура > 5 и ВыборкаПозицииЧека.Смолл_ЕдиницаИзмеренияКоробкиКоэффициент > 1 и ВыборкаПозицииЧека.Количество >= ВыборкаПозицииЧека.Смолл_ЕдиницаИзмеренияКоробкиКоэффициент*10 Тогда
						ПозицияПроверена = ложь;
					КонецЕсли;
				КонецЕсли;
				Если ПозицияПроверена Тогда
					СтрокаДанные = СтрокаДанные + 
					СокрЛП(ВыборкаПозицииЧека.Регион)+Разделитель+
					ВыборкаПозицииЧека.Формат+Разделитель+
					?(ЗначениеЗаполнено(ВыборкаПозицииЧека.ИдВнешнейСистемыСЕ),ВыборкаПозицииЧека.ИдВнешнейСистемыСЕ,ВыборкаПозицииЧека.КодСЕ)+Разделитель+
					Формат(ВыборкаПозицииЧека.ДатаВремяЗакрытияЧека,"ДЛФ=Д")+Разделитель+
					Формат(ВыборкаПозицииЧека.ДатаВремяЗакрытияЧека,"ДЛФ=В")+Разделитель+
					ВыборкаСЕ.Чек+Разделитель+
					ВыборкаПозицииЧека.PosName+"/"+ВыборкаПозицииЧека.НомерЧекаККМ+Разделитель+
					ВыборкаПозицииЧека.ГруппаУровень2+Разделитель+
					ПолучитьКодКатегорииТовара(ВыборкаПозицииЧека)+Разделитель+
					ПолучитьКатегориюТовара(ВыборкаПозицииЧека)+Разделитель+
					ВыборкаПозицииЧека.ГруппаУровень5+Разделитель+
					ПолучитьСегментТовара(ВыборкаПозицииЧека)+Разделитель+
					?(ЗначениеЗаполнено(ВыборкаПозицииЧека.НоменклатураИдВнешнейСистемы),ВыборкаПозицииЧека.НоменклатураИдВнешнейСистемы,ВыборкаПозицииЧека.НоменклатураКод)+Разделитель+
					ВыборкаПозицииЧека.ТорговаяМарка+" "+?(ЗначениеЗаполнено(ВыборкаПозицииЧека.НаименованиеДляЦенника),ВыборкаПозицииЧека.НаименованиеДляЦенника,ВыборкаПозицииЧека.Номенклатура)+Разделитель+
					// цена регулярная
					ВыборкаПозицииЧека.Цена+Разделитель+
					ВыборкаПозицииЧека.Цена+Разделитель+
					// код акции
					ВыборкаПозицииЧека.Количество+Разделитель+
					ВыборкаПозицииЧека.Сумма+Разделитель+
					// закупочная цена
					?(ВыборкаПозицииЧека.СтатусABC = Справочники.Смолл_СтатусыНоменклатурыABC.A или 
					  ВыборкаПозицииЧека.СтатусABC = Справочники.Смолл_СтатусыНоменклатурыABC.B или 
					  ВыборкаПозицииЧека.СтатусABC = Справочники.Смолл_СтатусыНоменклатурыABC.C или 
					  ВыборкаПозицииЧека.СтатусABC = Справочники.Смолл_СтатусыНоменклатурыABC.N,"","00")+Разделитель+// статус товара
					?(ЗначениеЗаполнено(ВыборкаПозицииЧека.МинРозничнаяЦена),ВыборкаПозицииЧека.МинРозничнаяЦена*ВыборкаПозицииЧека.ВесНетто/1000,"")+Разделитель+// мин. розничная цена
					""+Разделитель+// макс розничная цена
					//ШК
					// KVI
					""+Разделитель+ // СТМ
					""+Разделитель+ // СТМ Брэнд Цель
					""+Разделитель+ // ценовой разрыв СТМ
					ВыборкаПозицииЧека.ТорговаяМарка+Разделитель+
					""+Разделитель+ // ключевая харакетристика 2
					""+Разделитель+ // сегмент покупателя
					""+Разделитель+ // ID карты лояльности
					ВыборкаПозицииЧека.PriceFamily+Разделитель+
					СокрЛП(ВыборкаПозицииЧека.Кластер)
					+Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	возврат СтрокаДанные;

КонецФункции

// Функция - Получить данные по ассортименту
//
// Параметры:
//  НачалоПериода	 - 	 - 
//  КонецПериода	 - 	 - 
//  Разделитель		 - 	 - 
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьДанныеПоАссортименту(НачалоПериода,КонецПериода,Разделитель)

	ФирмаЦены = Константы.ФирмаОпределяющаяЦеныДляТорговогоОборудования.Получить();
	СтрокаДанные = "";
	МВТ = новый МенеджерВременныхТаблиц;
	запрос = новый запрос("ВЫБРАТЬ
	                      |	АссортиментСрезПоследних.Период КАК Период,
	                      |	АссортиментСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	                      |	АссортиментСрезПоследних.Номенклатура КАК Номенклатура,
	                      |	АссортиментСрезПоследних.Статус КАК Статус
	                      |ПОМЕСТИТЬ ВТСтатусыИсходная
	                      |ИЗ
	                      |	РегистрСведений.Ассортимент.СрезПоследних(&ДатаСреза, ) КАК АссортиментСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЦеныНоменклатурыЗакупочныеСрезПоследних.Период КАК Период,
	                      |	ЦеныНоменклатурыЗакупочныеСрезПоследних.Номенклатура КАК Номенклатура,
	                      |	ЦеныНоменклатурыЗакупочныеСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	                      |	ЦеныНоменклатурыЗакупочныеСрезПоследних.Фирма КАК Фирма,
	                      |	ЦеныНоменклатурыЗакупочныеСрезПоследних.Цена КАК Цена
	                      |ПОМЕСТИТЬ ЦеныЗакупочные
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатурыЗакупочные.СрезПоследних(&ДатаСреза, Фирма = &Фирма) КАК ЦеныНоменклатурыЗакупочныеСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТСтатусыИсходная.Период КАК Период,
	                      |	ВТСтатусыИсходная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	                      |	ВТСтатусыИсходная.Номенклатура КАК Номенклатура,
	                      |	ВТСтатусыИсходная.Статус КАК Статус,
	                      |	Смолл_ЗначенияСтатусовАВССрезПоследних.СтатусABC КАК СтатусABC,
	                      |	ЕСТЬNULL(ЦеныЗакупочные.Цена, 0) КАК ЦенаЗакупочная
	                      |ПОМЕСТИТЬ ВТСтатусыНоменклатуры
	                      |ИЗ
	                      |	ВТСтатусыИсходная КАК ВТСтатусыИсходная
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Смолл_ЗначенияСтатусовАВС.СрезПоследних(&ДатаСреза, Уровень = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка)) КАК Смолл_ЗначенияСтатусовАВССрезПоследних
	                      |		ПО ВТСтатусыИсходная.Номенклатура = Смолл_ЗначенияСтатусовАВССрезПоследних.Номенклатура
	                      |			И (Смолл_ЗначенияСтатусовАВССрезПоследних.СтатусABC = ЗНАЧЕНИЕ(Справочник.Смолл_СтатусыНоменклатурыABC.A)
	                      |				ИЛИ Смолл_ЗначенияСтатусовАВССрезПоследних.СтатусABC = ЗНАЧЕНИЕ(Справочник.Смолл_СтатусыНоменклатурыABC.B)
	                      |				ИЛИ Смолл_ЗначенияСтатусовАВССрезПоследних.СтатусABC = ЗНАЧЕНИЕ(Справочник.Смолл_СтатусыНоменклатурыABC.C)
	                      |				ИЛИ Смолл_ЗначенияСтатусовАВССрезПоследних.СтатусABC = ЗНАЧЕНИЕ(Справочник.Смолл_СтатусыНоменклатурыABC.N))
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеВыгружатьВSmartPricing
	                      |		ПО ВТСтатусыИсходная.Номенклатура.Родитель.Родитель.Родитель.Родитель = ЗначениеВыгружатьВSmartPricing.Объект
	                      |			И (ЗначениеВыгружатьВSmartPricing.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |			И (ЗначениеВыгружатьВSmartPricing.Свойство = &СвойствоВыгружатьВSmartPricing)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныЗакупочные КАК ЦеныЗакупочные
	                      |		ПО ВТСтатусыИсходная.СтруктурнаяЕдиница = ЦеныЗакупочные.СтруктурнаяЕдиница
	                      |			И ВТСтатусыИсходная.Номенклатура = ЦеныЗакупочные.Номенклатура
	                      |ГДЕ
	                      |	НЕ ВТСтатусыИсходная.СтруктурнаяЕдиница.ПометкаУдаления
	                      |	И ВТСтатусыИсходная.СтруктурнаяЕдиница.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |	И ЗначениеВыгружатьВSmartPricing.Значение = ИСТИНА
	                      |	И ЕСТЬNULL(ЦеныЗакупочные.Цена, 0) > 0
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВТСтатусыНоменклатуры.Номенклатура КАК Номенклатура
	                      |ИЗ
	                      |	ВТСтатусыНоменклатуры КАК ВТСтатусыНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	                      |ГДЕ
	                      |	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	                      |	И СтруктурныеЕдиницы.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)");	
	запрос.МенеджерВременныхТаблиц = МВТ;
	запрос.УстановитьПараметр("ДатаСреза",КонецПериода);
	запрос.УстановитьПараметр("СвойствоВыгружатьВSmartPricing",ПолучитьСоздатьСвойствоВыгружатьВSmartPricing());
	запрос.УстановитьПараметр("Фирма",ФирмаЦены);
	Рез = запрос.ВыполнитьПакет();
	мНоменклатура = Рез[3].Выгрузить().ВыгрузитьКолонку("Номенклатура");					  
	мСЕ = Рез[4].Выгрузить().ВыгрузитьКолонку("Ссылка");					  
	ТЗЦеныТекущие = ОмЦенообразование.ПолучитьТекущиеЦены(КонецПериода,ФирмаЦены,Справочники.КатегорииЦен.Розничная,мСЕ,мНоменклатура,,Истина,,Ложь);
	
	запрос = новый запрос("ВЫБРАТЬ
	                      |	ЦеныТекущие.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	                      |	ЦеныТекущие.Номенклатура КАК Номенклатура,
	                      |	ЦеныТекущие.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |	ЦеныТекущие.Характеристика КАК Характеристика,
	                      |	ЦеныТекущие.ЦенаТекущая КАК ЦенаТекущая
	                      |ПОМЕСТИТЬ ВТЦеныТекущие
	                      |ИЗ
	                      |	&ТЗЦеныТекущие КАК ЦеныТекущие
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РекламныеАкцииЦены.Период КАК Период,
	                      |	РекламныеАкцииЦены.Номенклатура КАК Номенклатура,
	                      |	РекламныеАкцииЦены.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	                      |	МАКСИМУМ(РекламныеАкцииЦены.Цена) КАК ЦенаАкционная,
	                      |	МАКСИМУМ(РекламныеАкцииЦены.ДатаОкончания) КАК ДатаОкончания,
	                      |	МАКСИМУМ(РекламныеАкцииЦены.ЦенаТекущая) КАК ЦенаДоАкции
	                      |ПОМЕСТИТЬ ЦеныАкционные
	                      |ИЗ
	                      |	РегистрСведений.РекламныеАкцииЦены КАК РекламныеАкцииЦены
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтатусыНоменклатуры КАК ВТСтатусыНоменклатуры
	                      |		ПО РекламныеАкцииЦены.СтруктурнаяЕдиница = ВТСтатусыНоменклатуры.СтруктурнаяЕдиница
	                      |			И РекламныеАкцииЦены.Номенклатура = ВТСтатусыНоменклатуры.Номенклатура
	                      |ГДЕ
	                      |	НЕ(РекламныеАкцииЦены.Период > &ДатаСреза
	                      |				ИЛИ РекламныеАкцииЦены.ДатаОкончания < &ДатаСреза)
	                      |	И (РекламныеАкцииЦены.ВидРекламнойАкции = ЗНАЧЕНИЕ(Перечисление.ВидыРекламныхАкций.СпецЦена)
	                      |			ИЛИ РекламныеАкцииЦены.ВидРекламнойАкции = ЗНАЧЕНИЕ(Перечисление.ВидыРекламныхАкций.ПроцентСкидки))
	                      |	И РекламныеАкцииЦены.КатегорияЦен = ЗНАЧЕНИЕ(Справочник.КатегорииЦен.Розничная)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РекламныеАкцииЦены.Период,
	                      |	РекламныеАкцииЦены.Номенклатура,
	                      |	РекламныеАкцииЦены.СтруктурнаяЕдиница
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТСтатусыНоменклатуры.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	                      |	ВТСтатусыНоменклатуры.СтруктурнаяЕдиница.ИДВнешнейСистемы КАК ИдВнешнейСистемыСЕ,
	                      |	ВТСтатусыНоменклатуры.СтруктурнаяЕдиница.Код КАК КодСЕ,
	                      |	ВТСтатусыНоменклатуры.СтруктурнаяЕдиница.Формат КАК Формат,
	                      |	ВТСтатусыНоменклатуры.СтруктурнаяЕдиница.Регион КАК Регион,
	                      |	ВТСтатусыНоменклатуры.Номенклатура КАК Номенклатура,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.ИДВнешнейСистемы КАК НоменклатураИДВнешнейСистемы,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Код КАК НоменклатураКод,
	                      |	ВТСтатусыНоменклатуры.Статус КАК Статус,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель КАК ГруппаУровень5,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Код КАК КодГруппаУровень5,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень5,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель КАК ГруппаУровень4,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Код КАК КодГруппаУровень4,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень4,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель КАК ГруппаУровень3,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Код КАК КодГруппаУровень3,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень3,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Родитель КАК ГруппаУровень2,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Родитель.Код КАК КодГруппаУровень2,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень2,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель КАК ГруппаУровень1,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Код КАК КодГруппаУровень1,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.ИДВнешнейСистемы КАК ИдГруппаУровень1,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Смолл_ТипСТМ КАК ТипСТМ,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Смолл_ТипСТМ.Код КАК КодТипСТМ,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.Смолл_PriceFamily КАК PriceFamily,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.ТорговаяМарка КАК ТорговаяМарка,
	                      |	ВТСтатусыНоменклатуры.Номенклатура.НаименованиеДляЦенника КАК НаименованиеДляЦенника,
	                      |	ЗначениеСвойстваКластер.Значение КАК Кластер,
	                      |	ВТСтатусыНоменклатуры.СтатусABC КАК СтатусABC,
	                      |	ВТСтатусыНоменклатуры.ЦенаЗакупочная КАК ЦенаЗакупочная,
	                      |	ЕСТЬNULL(ЗначениеУровеньSmartPricing.Значение, 0) КАК УровеньSmartPricing,
	                      |	ЕСТЬNULL(ЗначениеВесНеттоЕдиницыИзмерения.Значение, 0) КАК ВесНетто,
	                      |	ЕСТЬNULL(ЗначениеМинЦена.Значение, 0) КАК МинРозничнаяЦена,
	                      |	ЕСТЬNULL(ЗначениеСвойстваОсновнойШК.Значение, """") КАК ОсновнойШК,
	                      |	ЕСТЬNULL(ЦеныАкционные.ЦенаАкционная, 0) КАК ЦенаАкционная,
	                      |	ЕСТЬNULL(ЦеныАкционные.ЦенаДоАкции, 0) КАК ЦенаДоАкции,
	                      |	ЕСТЬNULL(ВТЦеныТекущие.ЦенаТекущая,0) КАК ЦенаРозничная
	                      |ИЗ
	                      |	ВТСтатусыНоменклатуры КАК ВТСтатусыНоменклатуры
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеСвойстваКластер
	                      |		ПО ВТСтатусыНоменклатуры.СтруктурнаяЕдиница = ЗначениеСвойстваКластер.Объект
	                      |			И (ЗначениеСвойстваКластер.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |			И (ЗначениеСвойстваКластер.Свойство = &СвойствоКластер)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеУровеньSmartPricing
	                      |		ПО ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Родитель = ЗначениеУровеньSmartPricing.Объект
	                      |			И (ЗначениеУровеньSmartPricing.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |			И (ЗначениеУровеньSmartPricing.Свойство = &СвойствоУровеньSmartPricing)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеВесНеттоЕдиницыИзмерения
	                      |		ПО ВТСтатусыНоменклатуры.Номенклатура.Смолл_БазоваяЕдиницаИзмерения = ЗначениеВесНеттоЕдиницыИзмерения.Объект
	                      |			И (ЗначениеВесНеттоЕдиницыИзмерения.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |			И (ЗначениеВесНеттоЕдиницыИзмерения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Нетто))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеМинЦена
	                      |		ПО ВТСтатусыНоменклатуры.Номенклатура.Родитель.Родитель.Родитель.Родитель = ЗначениеМинЦена.Объект
	                      |			И (ЗначениеМинЦена.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |			И (ЗначениеМинЦена.Свойство = &СвойствоМинЦена)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныАкционные КАК ЦеныАкционные
	                      |		ПО ВТСтатусыНоменклатуры.СтруктурнаяЕдиница = ЦеныАкционные.СтруктурнаяЕдиница
	                      |			И ВТСтатусыНоменклатуры.Номенклатура = ЦеныАкционные.Номенклатура
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначениеСвойстваОсновнойШК
	                      |		ПО ВТСтатусыНоменклатуры.Номенклатура = ЗначениеСвойстваОсновнойШК.Объект
	                      |			И (ЗначениеСвойстваОсновнойШК.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |			И (ЗначениеСвойстваОсновнойШК.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.ОсновнойШК))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныТекущие КАК ВТЦеныТекущие
	                      |		ПО ВТСтатусыНоменклатуры.СтруктурнаяЕдиница = ВТЦеныТекущие.СтруктурнаяЕдиница
	                      |			И ВТСтатусыНоменклатуры.Номенклатура = ВТЦеныТекущие.Номенклатура");	
	запрос.МенеджерВременныхТаблиц = МВТ;
	запрос.УстановитьПараметр("ТЗЦеныТекущие",ТЗЦеныТекущие);
	запрос.УстановитьПараметр("СвойствоКластер",ПолучитьСоздатьСвойствоКластер());
	запрос.УстановитьПараметр("ДатаСреза",КонецПериода);
	запрос.УстановитьПараметр("СвойствоВыгружатьВSmartPricing",ПолучитьСоздатьСвойствоВыгружатьВSmartPricing());
	запрос.УстановитьПараметр("СвойствоУровеньSmartPricing",ПолучитьСоздатьСвойствоУровеньSmartPricing());
	запрос.УстановитьПараметр("СвойствоМинЦена",ПолучитьСоздатьСвойствоМинРозничнаяЦена());
	
	выборка = запрос.Выполнить().Выбрать();
	ДатаСтатусов = НачалоДня(ТекущаяДатаСеанса());
	Пока выборка.Следующий() Цикл
		СтрокаДанные = СтрокаДанные + 
		СокрЛП(Формат(ДатаСтатусов,"ДЛФ=Д"))+Разделитель+
		"00:00"+Разделитель+
		Выборка.Регион+Разделитель+
		Выборка.Формат+Разделитель+
		Выборка.Кластер+Разделитель+
		?(ЗначениеЗаполнено(Выборка.ИдВнешнейСистемыСЕ),Выборка.ИдВнешнейСистемыСЕ,Выборка.КодСЕ)+Разделитель+
		Выборка.ГруппаУровень2+Разделитель+
		ПолучитьКодКатегорииТовара(Выборка)+Разделитель+
		ПолучитьКатегориюТовара(Выборка)+Разделитель+
		Выборка.ГруппаУровень5+Разделитель+
		ПолучитьСегментТовара(Выборка)+Разделитель+
		?(ЗначениеЗаполнено(Выборка.НоменклатураИдВнешнейСистемы),Выборка.НоменклатураИдВнешнейСистемы,Выборка.НоменклатураКод)+Разделитель+
		Выборка.ТорговаяМарка+" "+?(ЗначениеЗаполнено(Выборка.НаименованиеДляЦенника),Выборка.НаименованиеДляЦенника,Выборка.Номенклатура)+Разделитель+
		ПолучитьРегулярнуюЦену(Выборка)+Разделитель+// цена регулярная
		""+Разделитель+// промо цена
		""+Разделитель+// код акции
		?(Выборка.СтатусABC = Справочники.Смолл_СтатусыНоменклатурыABC.A или 
		  Выборка.СтатусABC = Справочники.Смолл_СтатусыНоменклатурыABC.B или 
		  Выборка.СтатусABC = Справочники.Смолл_СтатусыНоменклатурыABC.C или 
		  Выборка.СтатусABC = Справочники.Смолл_СтатусыНоменклатурыABC.N,"","00")+Разделитель+// статус товара
		Выборка.ОсновнойШК+Разделитель+// ШК
		// KVI
		// 
		""+Разделитель+// стм
		Выборка.ЦенаЗакупочная+Разделитель+// закупочная цена
		""+Разделитель+ // СТМ Брэнд Цель
		""+Разделитель+ // ценовой разрыв СТМ
		Выборка.PriceFamily+Разделитель+
		?(ЗначениеЗаполнено(Выборка.МинРозничнаяЦена),Выборка.МинРозничнаяЦена*Выборка.ВесНетто/1000,"")+Разделитель+// мин. розничная цена
		""+Разделитель+ // макс розничная цена
		Выборка.ТорговаяМарка+Разделитель+
		""+ // ключевая характеристика товара 2
		Символы.ПС;
	КонецЦикла;
	
	возврат СтрокаДанные;

КонецФункции 

Функция ПолучитьРегулярнуюЦену(ВыборкаПозиция)

	// пока неизвестно как получать спец. цену, добавить после реализации функционала по спец. ценам
	СпецЦена = 0;
	РегулярнаяЦена = 0;
	
	Если ВыборкаПозиция.ЦенаАкционная > 0 Тогда
		Если ВыборкаПозиция.ЦенаДоАкции Тогда
			РегулярнаяЦена = ВыборкаПозиция.ЦенаДоАкции;
		Иначе	
			РегулярнаяЦена = СпецЦена;
		КонецЕсли;
	Иначе	
		Если СпецЦена>0 Тогда
			РегулярнаяЦена = СпецЦена;
		Иначе
			РегулярнаяЦена = ВыборкаПозиция.ЦенаРозничная;
		КонецЕсли;
	КонецЕсли;
	
	возврат РегулярнаяЦена;

КонецФункции // ()


Функция ПолучитьЦеныКонкурентов(НачалоПериода,КонецПериода,Разделитель)

	СтрокаДанные = "";
	запрос = новый Запрос("ВЫБРАТЬ
	                      |	ЦеныКонкурентов.Период КАК Период,
	                      |	ЦеныКонкурентов.Номенклатура КАК Номенклатура,
	                      |	ЦеныКонкурентов.Номенклатура.НаименованиеДляЦенника КАК НаименованиеДляЦенника,
	                      |	ЦеныКонкурентов.Номенклатура.ИДВнешнейСистемы КАК ИдВнешнейСистемыНоменклатура,
	                      |	ЦеныКонкурентов.Номенклатура.Код КАК КодНоменклатура,
	                      |	ЦеныКонкурентов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |	ЦеныКонкурентов.Характеристика КАК Характеристика,
	                      |	ЦеныКонкурентов.Конкурент КАК Конкурент,
	                      |	ЦеныКонкурентов.Конкурент.ИДВнешнейСистемы КАК ИДВнешнейСистемыКонкурент,
	                      |	ЦеныКонкурентов.Конкурент.Код КАК КодКонкурент,
	                      |	ЦеныКонкурентов.Конкурент.Регион КАК КонкурентРегион,
	                      |	ЦеныКонкурентов.КатегорияЦен КАК КатегорияЦен,
	                      |	ЦеныКонкурентов.Цена КАК Цена,
	                      |	Смолл_КластерыПоКонкурентам.Кластер КАК Кластер,
	                      |	ЗначенияСвойствОбъектов.Объект.Формат КАК Формат
	                      |ИЗ
	                      |	РегистрСведений.ЦеныКонкурентов КАК ЦеныКонкурентов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Смолл_КластерыПоКонкурентам КАК Смолл_КластерыПоКонкурентам
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                      |			ПО Смолл_КластерыПоКонкурентам.Кластер = ЗначенияСвойствОбъектов.Значение
	                      |				И (ЗначенияСвойствОбъектов.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяССылка))
	                      |				И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
	                      |		ПО ЦеныКонкурентов.Конкурент = Смолл_КластерыПоКонкурентам.Конкурент
	                      |ГДЕ
	                      |	ЦеныКонкурентов.Активность
	                      |	И ЦеныКонкурентов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Период");
	запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	запрос.УстановитьПараметр("КонецПериода",КонецПериода);
	запрос.УстановитьПараметр("Свойство",ПолучитьСоздатьСвойствоКластер());
	выборка = запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		СтрокаДанные = СтрокаДанные+
		?(ЗначениеЗаполнено(выборка.ИдВнешнейСистемыНоменклатура),выборка.ИдВнешнейСистемыНоменклатура,выборка.КодНоменклатура)+Разделитель+
		выборка.НаименованиеДляЦенника+Разделитель+
		?(ЗначениеЗаполнено(выборка.КонкурентРегион),выборка.КонкурентРегион.Код,"")+Разделитель+
		выборка.Формат+Разделитель+ // формат магазина ДОБАВИТЬ ПОЗЖЕ!
		выборка.Кластер+Разделитель+ 
		Формат(выборка.Период,"ДЛФ=Д")+Разделитель+
		Формат(выборка.Период,"ДЛФ=В")+Разделитель+
		?(ЗначениеЗаполнено(выборка.ИдВнешнейСистемыКонкурент),выборка.ИдВнешнейСистемыКонкурент,выборка.КодКонкурент)+Разделитель+
		выборка.Конкурент+Разделитель+
		"1"+Разделитель+
		Формат(выборка.Цена,"ЧРД=.; ЧРГ=")+Разделитель+
		""+Символы.ПС;
	КонецЦикла;

	возврат СтрокаДанные;	

КонецФункции


Функция ПолучитьСегментТовара(ВыборкаПозиция)

	Если ВыборкаПозиция.КодТипСТМ = "0" Тогда
		СегментТовара = "";
	ИначеЕсли ВыборкаПозиция.КодТипСТМ = "1" Тогда
		СегментТовара = Строка(ВыборкаПозиция.ТипСТМ)+"ИФ";
	ИначеЕсли ВыборкаПозиция.КодТипСТМ = "2" Тогда
		СегментТовара = Строка(ВыборкаПозиция.ТипСТМ)+"ИП";
	ИначеЕсли ВыборкаПозиция.КодТипСТМ = "3" Тогда
		СегментТовара = Строка(ВыборкаПозиция.ТипСТМ)+"НП";
	ИначеЕсли ВыборкаПозиция.КодТипСТМ = "4" Тогда
		СегментТовара = Строка(ВыборкаПозиция.ТипСТМ)+"ПК";
	Иначе	
		СегментТовара = Строка(ВыборкаПозиция.ТипСТМ)+"СТМ";
	КонецЕсли;
	
	возврат СегментТовара;

КонецФункции

Функция ПолучитьКодКатегорииТовара(ВыборкаПозиция)
	
	Если ВыборкаПозиция.УровеньSmartPricing = 1 Тогда
		КодКатегории = ?(ЗначениеЗаполнено(ВыборкаПозиция.ИдГруппаУровень5),ВыборкаПозиция.ИдГруппаУровень5,ВыборкаПозиция.КодГруппаУровень5);
	ИначеЕсли ВыборкаПозиция.УровеньSmartPricing = 2 Тогда
		КодКатегории = ?(ЗначениеЗаполнено(ВыборкаПозиция.ИдГруппаУровень4),ВыборкаПозиция.ИдГруппаУровень4,ВыборкаПозиция.КодГруппаУровень4);
	ИначеЕсли ВыборкаПозиция.УровеньSmartPricing = 3 Тогда
		КодКатегории = ?(ЗначениеЗаполнено(ВыборкаПозиция.ИдГруппаУровень3),ВыборкаПозиция.ИдГруппаУровень3,ВыборкаПозиция.КодГруппаУровень3);
	Иначе	
		КодКатегории = ?(ЗначениеЗаполнено(ВыборкаПозиция.ИдГруппаУровень2),ВыборкаПозиция.ИдГруппаУровень2,ВыборкаПозиция.КодГруппаУровень2);
	КонецЕсли;

	возврат КодКатегории;

КонецФункции

Функция ПолучитьКатегориюТовара(ВыборкаПозиция)
	
	Если ВыборкаПозиция.УровеньSmartPricing = 1 Тогда
		Категория = ВыборкаПозиция.ГруппаУровень5;
	ИначеЕсли ВыборкаПозиция.УровеньSmartPricing = 2 Тогда
		Категория = ВыборкаПозиция.ГруппаУровень4;
	ИначеЕсли ВыборкаПозиция.УровеньSmartPricing = 3 Тогда
		Категория = ВыборкаПозиция.ГруппаУровень3;
	Иначе	
		Категория = ВыборкаПозиция.ГруппаУровень2;
	КонецЕсли;

	возврат Категория;

КонецФункции

Функция ПолучитьСоздатьСвойствоМинРозничнаяЦена()
	
	ТипМинЦена = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ДляЭлемента = Перечисления.Использование.ДляГруппы;
	пСвойство = Смолл_СоздатьПланВидовХарактеристик(
		"МинимальнаяРозничнаяЦена", ТипМинЦена, неопределено, ДляЭлемента, ложь, истина,ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
	Возврат пСвойство;

КонецФункции

Функция ПолучитьСоздатьСвойствоУровеньSmartPricing()
	
	ТипУровеньSmartPricing = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0));
	ДляЭлемента = Перечисления.Использование.ДляГруппы;
	пСвойство = Смолл_СоздатьПланВидовХарактеристик(
		"УровеньSmartPricing", ТипУровеньSmartPricing, неопределено, ДляЭлемента, ложь, истина,ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
	Возврат пСвойство;

КонецФункции

Функция ПолучитьСоздатьСвойствоВыгружатьВSmartPricing()
	
	ТипВыгружатьВSmartPricing = Новый ОписаниеТипов("Булево");
	ДляЭлемента = Перечисления.Использование.ДляГруппы;
	пСвойство = Смолл_СоздатьПланВидовХарактеристик(
		"ВыгружатьВSmartPricing", ТипВыгружатьВSmartPricing, неопределено, ДляЭлемента, ложь, истина,ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
	Возврат пСвойство;

КонецФункции

Функция ПолучитьСоздатьСвойствоКластер()
	
	ТипКластеры = Новый ОписаниеТипов("СправочникСсылка.Смолл_Кластеры");
	ДляЭлемента = Перечисления.Использование.ДляЭлемента;
	пСвойство = Смолл_СоздатьПланВидовХарактеристик(
		"Кластер", ТипКластеры, неопределено, ДляЭлемента, "", истина,ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СтруктурныеЕдиницы);
	Возврат пСвойство;

КонецФункции

Функция Смолл_СоздатьПланВидовХарактеристик(
		Заголовок, ТипПоУмолчанию, Родитель, Использование, ЗначениеПоУмолчанию = Неопределено, ОбщееСвойство = Истина,НазначениеСвойства) Экспорт 
	Имя = СформироватьИмя(Заголовок, "Свойство_");
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоРеквизиту("Имя", Имя);
	ПустаяПВХ = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	Если Свойство = ПустаяПВХ Тогда
		обСвойство = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		обСвойство.Наименование = Заголовок;
		обСвойство.ТипЗначения = ТипПоУмолчанию;
		обСвойство.Использование = Использование;
		обСвойство.НазначениеСвойства = НазначениеСвойства; 
		обСвойство.Имя = Имя;
		обСвойство.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;  
		обСвойство.ОбщееСвойство = ОбщееСвойство;
		Попытка
			обСвойство.Записать();
			Возврат обСвойство.Ссылка;
		Исключение            
			тСообщения = СтрШаблон("Ошибка записи нового свйства %1, по причине %2",
				Заголовок, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(тСообщения);
			Возврат ПустаяПВХ;
		КонецПопытки;
	Иначе 
		Возврат Свойство;
	КонецЕсли;
КонецФункции

Функция СформироватьИмя(НаименованиеСвойства, Префикс = "") Экспорт 
	Результат = Префикс; 
	ЗаголовокОбъектаЧастями = СтрРазделить(НаименованиеСвойства, " ", Ложь);
	Для Каждого ЧастьЗаголовка Из ЗаголовокОбъектаЧастями Цикл
		Результат = Результат + ВРег(Лев(ЧастьЗаголовка, 1)) + Сред(ЧастьЗаголовка, 2);
	КонецЦикла;
	Результат = УдалитьНедопустимыеСимволы(Результат);
	Возврат Результат;
КонецФункции

Функция УдалитьНедопустимыеСимволы(ИсходнаяСтрока) Экспорт
	Результат = ИсходнаяСтрока;
	НедопустимыеСимволы = " ""/\[]:;|=?*<>.,%!№()-+@#$^&";
	НедопустимыеСимволы = НедопустимыеСимволы + Символы.Таб;
	Для ПозицияСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ПроверяемыйСимвол = Сред(НедопустимыеСимволы, ПозицияСимвола, 1);
		Если СтрНайти(Результат,ПроверяемыйСимвол) <> 0 Тогда
			Результат = СтрЗаменить(Результат, ПроверяемыйСимвол, "");
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

