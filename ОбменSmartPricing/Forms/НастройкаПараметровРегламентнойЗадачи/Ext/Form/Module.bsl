&НаКлиенте
Функция ПроверкиПройдены()
	
	//ТекстОшибки = "";
	//
	//Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект.ОсновнойАдресЭлектроннойПочты) Тогда 
	//	ТекстОшибки = "Некорректно указан адрес основной электронной почты; " + Объект.ОсновнойАдресЭлектроннойПочты;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Объект.АдресаЭлектроннойПочтыДляОтправкиКопий) Тогда
	//	Для Каждого СтрокаСписка Из СписокАдресовДляОтправкиКопий Цикл
	//		    АдресЭлектроннойПочты = СтрокаСписка.Значение;
	//			Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты) Тогда 
	//				ТекстОшибки = ТекстОшибки 
	//				+ ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") 
	//				+ "Некорректно указан адрес электронной почты: " + АдресЭлектроннойПочты;
	//			КонецЕсли;
	//		КонецЦикла;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(ТекстОшибки) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
	//КонецЕсли;
	//
	//Возврат Не ЗначениеЗаполнено(ТекстОшибки);
	
	возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Если ПроверкиПройдены() Тогда 
		НастройкиСтрокой = СохранитьСтруктуруПараметров();
		Оповестить("ОкончаниеРедактированияПараметровРегламентнойЗадачи", НастройкиСтрокой, ЭтаФорма); 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьСтруктуруПараметров()
	
	ПараметрыЗадачи = Новый Структура();
	ПараметрыЗадачи.Вставить("РежимЗагрузки"				, Объект.РежимЗагрузки);
	ПараметрыЗадачи.Вставить("АдресИнформирования"			, Объект.АдресИнформирования);
	ПараметрыЗадачи.Вставить("АдресСервераFTP"				, Объект.АдресСервераFTP);
	ПараметрыЗадачи.Вставить("ПортСервераFTP"				, Объект.ПортСервераFTP);
	ПараметрыЗадачи.Вставить("Пользователь"					, Объект.Пользователь);
	ПараметрыЗадачи.Вставить("Пароль"						, Объект.Пароль);
	ПараметрыЗадачи.Вставить("ДатаПоследнейУдачнойВыгрузки"	, Объект.ДатаПоследнейУдачнойВыгрузки);
	ПараметрыЗадачи.Вставить("КаталогВыгрузкиЦенКонкурентов", Объект.КаталогВыгрузкиЦенКонкурентов);
	ПараметрыЗадачи.Вставить("КаталогВыгрузкиПродаж"		, Объект.КаталогВыгрузкиПродаж);
	ПараметрыЗадачи.Вставить("КаталогВыгрузкиАссортимента"	, Объект.КаталогВыгрузкиАссортимента);
	ПараметрыЗадачи.Вставить("КаталогЗагрузкиПрайсов"		, Объект.КаталогЗагрузкиПрайсов);
	ПараметрыЗадачи.Вставить("КаталогАрхивации"				, Объект.КаталогАрхивации);
	ПараметрыЗадачи.Вставить("ГруппыНоменклатурыОпт"		, Объект.ГруппыИсключенияДляОпределенияОпта.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	ПараметрыЗадачи.Вставить("ФирмаДляПереоценок"			, Объект.ФирмаДляПереоценок);
	
	Возврат ЗначениеВСтрокуВнутр(ПараметрыЗадачи);
	
КонецФункции

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	Элементы.Выгрузка.Видимость = не Объект.РежимЗагрузки;
	Элементы.Загрузка.Видимость = Объект.РежимЗагрузки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	Если Параметры.Свойство("ГруппыНоменклатурыОпт") и ТипЗнч(Параметры.ГруппыНоменклатурыОпт) = Тип("Массив") Тогда
		Для каждого ГруппаОпт  Из Параметры.ГруппыНоменклатурыОпт Цикл
			СтрТЧ = Объект.ГруппыИсключенияДляОпределенияОпта.Добавить();
			СтрТЧ.Номенклатура = ГруппаОпт;
		КонецЦикла;
	КонецЕсли;
	Элементы.Выгрузка.Видимость = не Объект.РежимЗагрузки;
	Элементы.Загрузка.Видимость = Объект.РежимЗагрузки;
КонецПроцедуры
